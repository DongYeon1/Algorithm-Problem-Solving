python
양쪽에 ''' 또는 """ 함으로써 전체주석 할 수 있음

문제조건에 맞는 방향벡터 설정하기

좌표탐색을 할때는 항상 해당 탐색좌표가
전체 지도안에 들어오는지 확인하고 탐색을
시작해라

python 에는 switch 문이 없기때문에
sw bool 변수를 생성해서 조건문을 만들어
스위치를 구현할 수 있다. 

python 은 ! 연산자가 없고, not 으로 표현한다

컴퓨터 좌표에서는 ↓→ 방향이 양수방향이다
헷갈리지말자!

입력값이 y축 값인지 x축 값인지 정확히 구별해라
x,y 입력 출력 섞이면 코드 다맞는데 결과값 달라서
개삽질 한다.
보통은 2차원 배열 특성때문에
y,x 순으로 입력된다.



------------------구현코드


'''
아이디어
문제 조건대로 그대로 구현
종료조건 나오기 전까지 while 문 작성

for 문으로 4 방향 탐색 구현

방향벡터 설정


시간복잡도
모든 좌표 위치에서 각각 4번의 연산 
N*M*4 = O(NM) = 2500 << 2억

자료구조
N, M : int
x, y, d: int
map : int[][] 0:청소안한칸, 1:벽, 2:청소한칸
cnt : int 청소한칸수 결과값 
'''


#로봇 청소기와 방의 상태가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.

import sys
input = sys.stdin.readline

N,M = map(int,input().split())
x,y,d = map(int,input().split())
matrix = [list(map(int,input().split())) for _ in range(N)]
cnt = 0

dy = [-1,0,1,0]
dx = [0,1,0,-1]

#현재 칸이 아직 청소되지 않은 경우, 현재 칸을 청소한다.
while 1:
    go_to_1 = False
    if matrix[y][x] == 0:
        matrix[y][x] = 2
        cnt += 1
    #현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 있는 경우
    for i in range(1,5):
        #print("d:",d)
        #print("d-i:",d-i)
        ny = y + dy[(d-i)%4]
        nx = x + dx[(d-i)%4]
        if 0<=ny<N and 0<=nx<M:
            if matrix[ny][nx] == 0:
                d = (d-i)%4
                x = nx
                y = ny
                go_to_1 = True
                break
    #현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 있는 경우
    if not go_to_1:
        ny = y + dy[(d-2)%4]
        nx = x + dx[(d-2)%4]
        if 0<=ny<N and 0<=nx<M:
            if matrix[ny][nx] != 1:
                x = nx
                y = ny
            else:
                break
        else:
            break
    for i in matrix:
        print(i,"\n")
    print("------------------------------")
    print(x,y,d)

print(cnt)


